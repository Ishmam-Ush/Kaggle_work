# Loops and list comprehensions
planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
for planet in planets:
    print(planet, end=', ')
    #print(planet)   # The above code prints each planet twice, once with a comma and once on a new line.

print()  # This code prints each results on a new line.

# multiplicands
multiplicands = (2, 2, 2, 3, 3, 5)
product = 1
for mult in multiplicands:
    product = product*mult
product # The above code calculates the product of the multiplicands.
print(product)

# list comprehension 
s = 'steganograpHy is the practicE of conceaLing a file, message, image, or video within another fiLe, message, image, Or video.'
msg = ''
# print all the uppercase letters in s, one at a time
for char in s:
    if char.isupper():
        print(char, end='')
# range
for i in range(6):
    print('doing the work i=', i) # repeats the line 6 times with values assigned to i (0-6) and stating each time the value of i taken from range

# while loop
i = 0
while i < 10:
    print(i, end=' ')
    i += 1 # increment i by 1
print()  # This prints a new line after the while loop output.

# use of  list comprehension
squares = [n**2 for n in range(10)]
squares  # This creates a list of squares of numbers from 0 to 9.
print(squares)

#print()  # This prints a new line after the list comprehension output.
# without list comprehension
aquares = []
for n in range(10):
    squares.append(n**2)

print(squares)  # This appends the square of each number from 0 to 9 to the list squares and prints it.

# use of if in loop
short_planets = [planet for planet in planets if len(planet) < 6]
print(short_planets)
# This returns string all caps
long_planets = [planet.upper() + '!' for planet in planets if len(planet) < 6 ]
print(long_planets)


# Count negative numbers in a list
numbers = [1, -2, 3, -4, 5, -6, 7, -8]
def count_negatives(nums):
    negative = 0
    for num in nums:
        if num<0:
            negative= negative + 1
    return negative
print(count_negatives(numbers))  # This counts the number of negative numbers in the list and prints the result.

# Count negative numbers in a list using list comprehension
def count_negatives_comprehension(nums):
    return len([num for num in nums if num <0])
print(count_negatives_comprehension(numbers))  # This uses list comprehension to count the number of negative numbers in the list and prints the result.

# Different way of solbving the same problem
def count_negatives_alternative(nums):
    return sum([num < 0 for num in nums])
print(count_negatives_alternative(numbers))  # This uses the sum function to count the number of negative numbers in the list and prints the result.

## Exercise 1
# Had problems finding the bug in this code
def has_lucky_number(nums):
    """Return whether the given list of numbers is lucky. A lucky list contains
    at least one number divisible by 7.
    """
    for num in nums:
        if num % 7 == 0:
            return True
    return False

# Exercise 2
def elementwise_greater_than(L, thresh):
    """Return a list with the same length as L, where the value at index i is 
    True if L[i] is greater than thresh, and False otherwise.
    
    >>> elementwise_greater_than([1, 2, 3, 4], 2)
    [False, False, True, True]
    """
    return[element>thresh for element in L]
# Exercise 3
def menu_is_boring(meals):
    """Given a list of meals served over some period of time, return True if the
    same meal has ever been served two days in a row, and False otherwise.
    """
    for menu in range(1, len(meals)): # first we select the range of the meals list starting from 1 to the length of the meals list
        # then we check if the meal at the current index is the same as the meal at the previous index
        if meals[menu] == meals[menu-1] : # if yes we say that the menu is boring
            return True
    return False # else we say that the menu is not boring

# Exercise 4
import random # importing the random module to generate random numbers
def play_slot_machine():
    """Simulate playing a slot machine. Returns a random payout (0, 0, 1,0,1,0,0,0,0,5,0,0,0,0,7,0,0,0,0,1,0,0,0,0,1,0,0,0,0,5,0,0,0,1)."""
    return random.choice([0, 0, 1,0,1,0,0,0,0,5,0,0,0,0,7,0,0,0,0,1,0,0,0,0,1,0,0,0,0,5,0,0,0,1])# This function simulates playing a slot machine by randomly selecting a payout from a predefined list of possible payouts.

def estimate_average_slot_payout(n_runs):
    """Run the slot machine n_runs times and return the average net profit per run.
    Example calls (note that return value is nondeterministic!):
    >>> estimate_average_slot_payout(1)
    -1
    >>> estimate_average_slot_payout(1)
    0.5
    """
    payouts = [play_slot_machine()-1 for i in range(n_runs)] # This creates a list of payouts by playing the slot machine n_runs times and subtracting 1 from each payout to account for the cost of playing.
    # The payouts are generated by the play_slot_machine function, which simulates the slot machine.
    return  sum(payouts) / n_runs # This calculates the average payout by summing all the payouts and dividing by the number of runs.
# Example usage of the slot machine simulation
print(estimate_average_slot_payout(1000))  # This runs the slot machine 1000 times and returns the average net profit per run.